{
    savefile = DataReader(f"queries/AddFile.sql", connection = "agfiles") {
        none->Translation(f"templates-%s/registrationfail.html", locales = ["en", "nl"]);
        single->WriteToFile(
            pathvariable = "path",
            rootpath = f"storage",
            isrelative = true
        ) {
            failure->Translation(f"templates-%s/storefail.html", locales = ["en", "nl"]);
            meanwhile->Translation(f"templates-%s/uploading.html", locales = ["en", "nl"]);
            successful->Translation(f"templates-%s/storesuccess.html", locales = ["en", "nl"]);
        };
    };

    loadfile = DataReader(f"queries/GetFile.sql", connection = "agfiles") {
        none->HttpStatus(404) {
            next->Translation(f"templates-%s/404.html", locales = ["en", "nl"]);
        };
        single->ReadFromFile(
            pathvariable = "path",
            rootpath = f"storage",
            isrelative = true
        ) {
            header->HttpContent();
        };
    };   

    removefile = DataWriter(f"queries/PurgeFile.sql", connection = "agfiles") {
        changed_0->Translation(f"templates-%s/notremoved.html", locales = ["en", "nl"]);
        changed_1->Translation(f"templates-%s/removed.html", locales = ["en", "nl"]);
    };

    instances = {
        begin = Dir("filename") {
            main->HttpMethod() {
                get->Translation(f"templates-%s/list.html", locales = ["en", "nl"]) {
                    items->DataReader(f"queries/GetFiles.sql", connection = "agfiles") {
                        iterator->Translation(f"templates-%s/item.html", locales = ["en", "nl"]);
                    };
                };
                post->MultipartForm(fieldlist = ["filename", "title", "data"]) {                        
                    data->NameField("filename", required = true, maxlength = "75") {
                        successful->NameField("title", required = true, maxlength = "250") {
                            successful->savefile;
                            failure->FailCheck() & Translation(f"templates-%s/titlefail.html", locales = ["en", "nl"]);
                        };
                        failure->FailCheck() & Translation(f"templates-%s/namefail.html", locales = ["en", "nl"]);
                    }; 
                    failure->Translation(f"templates-%s/uploadfail.html", locales = ["en", "nl"]);
                };
            };
            continue->HttpMethod() {
                get->ContextCache(lifetime = "2s", keyname = "filename") {
                    begin->loadfile;
                };
                post->WwwForm(fieldlist = ["delete"]) {
                    mapped->TextField("delete", pattern = "^delete$") {
                        failure->Translation(f"templates-%s/removefail.html", locales = ["en", "nl"]);
                        successful->removefile;
                    };
                };
            };
        };

        byid = DataReader(f"queries/Get File by fileid.auto.sql", connection = "agfiles") {
            none->Return("none");
            single->Return("single");
        };

        filebyid = <f"admin.conf@byid"> {
            single->Translation(f"templates-%s/view.html", locales = ["en", "nl"]);
        };

        namebyid = <f"admin.conf@byid"> {
            single->Translation(f"templates-%s/tinyview.html", locales = ["en", "nl"]);
        };

        selector = Translation(f"templates-%s/select.html", locales = ["en", "nl"]) {
            current->DataReader(f"queries/Get File by fileid.auto.sql", connection = "agfiles") {
                single->Translation(f"templates-%s/currentoption.html", locales = ["en", "nl"]);
            };
            items->DataReader(f"queries/GetFiles.sql", connection = "agfiles") {
                iterator->Translation(f"templates-%s/option.html", locales = ["en", "nl"]);
            };
        };
    };
}